# puts "Create an array to store 5 names. 
# Have the user enter in the 5 names and then print out the 5 names in all UPPERCASE all on the same line. 
# Note that the user may not enter all the names in uppercase."

# names = []
# 5.times do |counter|
#     print "Enter name ##{counter + 1}: "
#     names << gets.chomp.upcase
# end

# print names



# puts "Create an array to store 3 boolean values entered in by the user. 
# Print out YES if all the values are true and NO if at least one value is false. 
# Hint: Prompt the user to enter true or false, and accept those values using gets. 
# Since gets will give us back a string (instead of the boolean values we want) 
# use if statements to convert those strings to boolean values."

# boolean = []
# 3.times do
#     print "True or false? "
#     input = gets.chomp.downcase
#     if input == "true"
#         boolean << true
#     elsif input == "false"
#         boolean << false
#     elsif 
#         puts "Please enter true or false."
#     end
# end

# if boolean[0] && boolean[1] && boolean[2]
#     puts "YES"
# else 
#     puts "NO"
# end
    


# puts "Create an array to store the following words: 
# firetruck, fire drill, fire hydrant, firefighter, fireproof, fire station, fire hose. 
# Then write code that uses the array to print out 
# truck, drill, hydrant, fighter, proof, station, hose without modifying the array."

# fire_department = ["firetruck", "fire drill", "fire hydrant", "firefighter", "fireproof", "fire station", "fire hose"]

# without_fire = []

# fire_department.each do |fire_word|
#     if fire_word.split().length == 2
#         split_words = fire_word.split()
#         without_fire << split_words[1]
#     else
#         split_words = fire_word.split("fire")
#         without_fire << split_words[1]
#     end
# end

# print without_fire



# puts "Create an array to store the amount of money spent on 4 people during the Holidays. 
# Have the user enter in the amount spent on each person. 
# Print the total spent on all the people. 
# Total money spent should be displayed with a dollar sign, decimal point, 
# and only 2 digits after the decimal."

# money_spent_all = []
# total_money_spent = 0

# 4.times do |counter|
#     print "Enter amount spent on person ##{counter + 1}: $"
#     money_spent_all << gets.chomp.to_f
# end

# money_spent_all.each do |money_spent_each|
#     total_money_spent += money_spent_each
# end

# puts "$%.2f" % total_money_spent

# print money_spent_all



# Create an array to store 5 random numbers 
# (between 1 and 10, including both 1 and 10) generated by the computer. 
# Print out the square of each of the elements in the array.

# numbers = Array.new(5) { |i| rand(1..10) }

# numbers.each {|i| puts i ** 2 }



# Create an array to store 5000 decimal numbers. 
# Randomly generate numbers from between 0 – 1 (including 0, but not including 1) to fill the array. 
# Calculate and print the mean of all the elements in the array.

# Without arguments, rand gives you a floating point number between 0 & 1
# decimal_numbers = Array.new(5000) { |i| rand }

# sum_of_numbers = 0

# decimal_numbers.each { |number_to_add| sum_of_numbers += number_to_add }

# mean_of_numbers = sum_of_numbers / 5000

# puts mean_of_numbers   



# Create an array of people that are invited to a party. 
# Allow the user to ask if a certain person is invited to the party. 
# If the person is on the invitation list respond INVITED otherwise respond NOT INVITED.

# invitation_list = ["Christina", "Thatcher", "Kelsey", "Zack"]

# print "Enter name to check invitation list: "
# person_invited = gets.chomp.capitalize

# if invitation_list.include?(person_invited)
#     puts "INVITED"
# else
#     puts "NOT INVITED"
# end



Have the user enter in a sentence. 
Then, using an array, store the frequency of each letter of the alphabet from the sentence. 
Print out the frequency of each letter. 
Do not count uppercase and lowercase letters differently.

letter_frequency = []

puts "Enter a sentence: "
    sentence = gets.chomp
puts sentence.split(//)

alphabet = Array.new { |letter| 

print alphabet


# puts "Create an array of size 8. Fill the array randomly with 0’s and 1’s. 
# Print out the array so that it appears as a binary number. 
# Calculate and print out the decimal value of that binary number.
# The decimal number is equal to the sum of binary digits (dn) times their power of 2 (2n)"

# random_numbers = Array.new(8) { |i| rand(0..1)}
# print random_numbers

# decimal_value = 0
# n = random_numbers.length - 1

# random_numbers.each do |binary_number|
#     decimal_value += binary_number * (2 ** n)
#     n -= 1
# end

# print decimal_value
